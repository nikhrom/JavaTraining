package com.github.nikhrom.javatraining.jdbc.starter;

import com.github.nikhrom.javatraining.jdbc.starter.util.ConnectionManager;
import org.postgresql.Driver;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Stream;

public class JdbcRunner {

    public static void main(String[] args) throws SQLException {
        checkMetaData();
    }



    private static void checkMetaData(){
        try (var connection = ConnectionManager.open()) {
            var metaData = connection.getMetaData();
            var catalogs = metaData.getCatalogs();
            while (catalogs.next()){
                System.out.println(catalogs.getString(1));
                var schemas = metaData.getSchemas();
                while (schemas.next()){
                    System.out.println(schemas.getString("TABLE_SCHEM"));

                    var tables = metaData.getTables(null, null, "%", null);
                    while (tables.next()){
                        System.out.println(tables.getString("TABLE_NAME"));
                    }
                }

            }


        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    private static List<Integer> getFlightsBetween(LocalDateTime start, LocalDateTime end){

        List<Integer> result = new ArrayList<>();

        String sql = """
                SELECT id
                FROM flight
                WHERE departure_date BETWEEN ? AND ?;
                """;

        try (var connection = ConnectionManager.open();
            var preparedStatement = connection.prepareStatement(sql)){



            preparedStatement.setTimestamp(1, Timestamp.valueOf(start));
            preparedStatement.setTimestamp(2, Timestamp.valueOf(end));

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()){
                var id = resultSet.getInt("id");

                result.add(id);
            }


        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

        return result;
    }

    private static List<Integer> getTicketsByFlightId(Integer flightId){
        String sql = """
                SELECT id, passenger_no, passenger_name, flight_id, seat_no, cost 
                FROM ticket
                WHERE flight_id = ?  
                """;

        List<Integer> ids = new ArrayList<>();

        try(var connection = ConnectionManager.open();
            var statement = connection.prepareStatement(sql)){

            statement.setInt(1, flightId);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()){
                var id = resultSet.getInt("id");
                var passenger_no = resultSet.getInt("passenger_no");
                var passenger_name = resultSet.getString("passenger_name");
                var flight_id = resultSet.getInt("flight_id");
                var seat_no = resultSet.getString("seat_no");
                var cost = resultSet.getString("cost");

                ids.add(id);

                System.out.println("%d  %d  %s  %d  %s  %s"
                        .formatted(id, passenger_no, passenger_name, flight_id, seat_no, cost));

            }


        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }


        return ids;
    }

    private static void workWithConnection() throws SQLException {
        String sql = """
                INSERT INTO info (data)
                VALUES
                ('autogenerated'),
                ('autogenerated')  
                """;


        try (var connection = ConnectionManager.open();
             var statement = connection.createStatement()) {

            System.out.println(connection.getTransactionIsolation());
            System.out.println(connection.getSchema());

            var executeResult = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
            ResultSet generatedKeys = statement.getGeneratedKeys();

            if (generatedKeys.next()) {
                String id = generatedKeys.getString(1);
                System.out.println(id);
            }


        }
    }

}
